"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2120],{8453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>o});var t=n(6540);const s={},r=t.createContext(s);function a(e){const i=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(r.Provider,{value:i},e.children)}},9830:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Lessons/Chapter-5/Chapter-5.3","title":"5.3 Initializing a Local Git Repository","description":"You can use Git locally without any hosting service to track your work. Once a directory is initialized, Git begins tracking changes to files inside it.","source":"@site/docs/Lessons/Chapter-5/Chapter-5.3.md","sourceDirName":"Lessons/Chapter-5","slug":"/Lessons/Chapter-5/Chapter-5.3","permalink":"/linux-101/docs/Lessons/Chapter-5/Chapter-5.3","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"5.3 Initializing a Local Git Repository"},"sidebar":"tutorialSidebar","previous":{"title":"5.2 Installing Git","permalink":"/linux-101/docs/Lessons/Chapter-5/Chapter-5.2"},"next":{"title":"5.4 Using `.gitignore` to Exclude Files (Optional)","permalink":"/linux-101/docs/Lessons/Chapter-5/Chapter-5.4"}}');var s=n(4848),r=n(8453);const a={title:"5.3 Initializing a Local Git Repository"},o=void 0,l={},c=[{value:"Creating a Local Repository",id:"creating-a-local-repository",level:3},{value:"Adding and Committing Files",id:"adding-and-committing-files",level:3},{value:"Tracking Multiple Files",id:"tracking-multiple-files",level:3},{value:"Committing Changes",id:"committing-changes",level:3},{value:"Simple Workflow Example",id:"simple-workflow-example",level:3}];function d(e){const i={blockquote:"blockquote",code:"code",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.p,{children:"You can use Git locally without any hosting service to track your work. Once a directory is initialized, Git begins tracking changes to files inside it."}),"\n",(0,s.jsx)(i.h3,{id:"creating-a-local-repository",children:"Creating a Local Repository"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"cd ~/projects\nmkdir my-first-repo\ncd my-first-repo\ngit init\n"})}),"\n",(0,s.jsxs)(i.p,{children:["This initializes a new Git repository in the current directory. You\u2019ll see a hidden folder named ",(0,s.jsx)(i.code,{children:".git"})," \u2014 this is where Git stores all version history and configuration."]}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h3,{id:"adding-and-committing-files",children:"Adding and Committing Files"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:'echo "My first Git-tracked file" > file.txt\ngit add file.txt\ngit commit -m "Initial commit: Added file.txt"\n'})}),"\n",(0,s.jsx)(i.p,{children:"You now have a local project with version control enabled."}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h3,{id:"tracking-multiple-files",children:"Tracking Multiple Files"}),"\n",(0,s.jsx)(i.p,{children:"If you create or modify several files at once, you can add them individually:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"git add file1.txt file2.txt notes.md\n"})}),"\n",(0,s.jsxs)(i.p,{children:["Or add ",(0,s.jsx)(i.strong,{children:"all new and modified files"})," in the current directory using:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"git add .\n"})}),"\n",(0,s.jsxs)(i.blockquote,{children:["\n",(0,s.jsxs)(i.p,{children:["\ud83d\udca1 The ",(0,s.jsx)(i.code,{children:"."})," means \u201cadd everything in this directory.\u201d\nIt\u2019s convenient, but review your changes first to avoid committing unwanted files."]}),"\n"]}),"\n",(0,s.jsx)(i.p,{children:"You can check which files are staged or modified before committing:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"git status\n"})}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h3,{id:"committing-changes",children:"Committing Changes"}),"\n",(0,s.jsx)(i.p,{children:"Once files are staged, record them with a commit message describing the change:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:'git commit -m "Update notes and add new files"\n'})}),"\n",(0,s.jsx)(i.p,{children:"To view your recent commits:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:"git log --oneline\n"})}),"\n",(0,s.jsx)(i.p,{children:"Each commit represents a snapshot of your project at a specific point in time."}),"\n",(0,s.jsx)(i.hr,{}),"\n",(0,s.jsx)(i.h3,{id:"simple-workflow-example",children:"Simple Workflow Example"}),"\n",(0,s.jsx)(i.p,{children:"Here\u2019s a quick look at the typical local Git workflow:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:'git status\n\ngit add .\n\ngit commit -m "Describe what changed"\n\ngit log --oneline\n'})}),"\n",(0,s.jsx)(i.p,{children:"Repeat this cycle each time you make updates to your project."}),"\n",(0,s.jsx)(i.hr,{})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);